#!/bin/bash
# Author: Kent Chadwick
# Description: Adds new business records to the "BusinessDetails" file
#
# read in arguments as tab separated substrings. the tabs will allow for delimiting the entries.
newBiz="$1	$2	$3	$4	$5"

entryMatchCount=$(grep -ci "$newBiz" BusinessDetails) # count exact matches
entryMatch=$(grep -i "$newBiz" BusinessDetails) # store exact match in variable
# use $1 variable as an awk variable to test match of particular column, and then print the whole line
bizMatch=$(awk -F "\t" -v var="$1" '{if ($1 == var) print $0;}' BusinessDetails) # store record with bizName match
if [ -z "$bizMatch" ]; then # if bizMatch is an empty string, set bizMatchCount to 0
	bizMatchCount=0
else
	bizMatchCount=$(grep -ci "$bizMatch" BusinessDetails)
fi

if [ $entryMatchCount -gt 0 ]; then
	echo
	echo "An identical record already exists!"
	echo
	# display header
	resultDisplay=$'Business Name\tContact Name\tAddress\tPhone Number\tEmail Address\n----------\t---------\t----------\t----------\t----------\n'
        resultDisplay+="$entryMatch"
	echo "$resultDisplay" | column -t -s $'\t' -n # displays result w/ column layout
	echo
	echo "Would you like to attempt adding a new business again? (y/n): "
	read ans
        if [[ $ans == y* || $ans == Y* ]]; then
		# read in user input for susiness details and pass the variables to the AddBiz script as arguments
	        echo
	        echo "Please enter the business name: "
	        read bizName
	        nameMenu=true
	        while [ $nameMenu == true ]; do # while loop to control validation of input
	                if [ -z "$bizName" ]; then # checks for empty string
	                        echo
	                        echo "No text entered. Please enter the business name again: "
	                        read bizName
	                else
	                        nameMenu=false
	                fi
	        done
	        echo
	        echo "Please enter the contact person's name: "
	        read contactName
	        contactMenu=true
	        while [ $contactMenu == true ]; do # while loop to control validation of input
	                if [ -z "$contactName" ]; then # checks for empty string
	                        echo
	                        echo "No text entered. Please enter the contact's name again: "
	                        read contactName
	                else
	                        contactMenu=false
	                fi
	        done
	        echo
	        echo "Please enter the business address: "
	        read bizAddress
	        addressMenu=true
	        while [ $addressMenu == true ]; do # while loop to control validation of input
	                if [ -z "$bizAddress" ]; then # checks for empty string
	                        echo
	                        echo "No text entered. Please enter the address again: "
	                        read bizAddress
	                else
	                        addressMenu=false
	                fi
	        done
	        echo
	        echo "Please enter the contact person's phone number: "
	        read contactNum
	        numMenu=true
	        phoneRegEx="\b[0-9._+-]{3,16}\b" # regex for phone patterns
	        while [ $numMenu == true ]; do # while loop to control validation of input
	                if [ -z "$contactNum" ]; then # checks for empty string
	                        echo
	                        echo "No number entered. Please enter the contact number: "
	                        read contactNum
	                elif [[ $contactNum =~ $phoneRegEx ]]; then # check for phone number format
	                        numMenu=false
	                else
	                        echo
	                        echo "Invalid entry. Phone number must be between 3 and 15 characters,"
	                        echo "and contain only numbers or the following symbols: . _ - +"
	                        echo
	                        echo "Please enter the contact person's phone number: "
	                        read contactNum
	                fi
	        done
	        echo
	        echo "Please enter contact person's email address: "
	        read contactEmail
	        emailRegEx="\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b"
	        emailMenu=true
	        while [ $emailMenu == true ]; do
	                if [[ $contactEmail =~ $emailRegEx ]]; then
	                        emailMenu=false
	                else
	                        echo
	                        echo "Invalid email address entered. Please enter the email address again: "
	                        read contactEmail
	                fi
	        done
	        echo
	        ./AddBiz "$bizName" "$contactName" "$bizAddress" "$contactNum" "$contactEmail"
	        echo
	else
		echo # no exits script and returns to main menu
	fi
elif [ $bizMatchCount -gt 0 ]; then
        echo
        echo "An identical business name was found in our records!"
        echo
        # display header
        resultDisplay=$'Business Name\tContact Name\tAddress\tPhone Number\tEmail Address\n----------\t---------\t----------\t----------\t----------\n'
        resultDisplay+="$bizMatch"
        echo "$resultDisplay" | column -t -s $'\t' -n # displays result w/ column layout
        echo
        echo "Would you like to overwrite the previous entry? (y/n): "
        read overwrite
        if [[ $overwrite == y* || $overwrite == Y* ]]; then
                firstResult="$bizMatch"
                updatedResult="$newBiz"
                sed -i "s/${firstResult}/${updatedResult}/" BusinessDetails
                echo
                echo "Entry updated:"
                echo
                #display header
                resultDisplay=$'Business Name\tContact Name\tAddress\tPhone Number\tEmail Address\n----------\t---------\t----------\t----------\t----------\n'
                resultDisplay+="$newBiz"
                echo "$resultDisplay" | column -t -s $'\t' -n # displays result w/ column layout
                echo
                ./Menu
	else
		echo
		exit 0
        fi
else
	echo "$newBiz" >> BusinessDetails
	echo
        echo "New Business - \"$1\" - added."
        echo
fi

exit 0
